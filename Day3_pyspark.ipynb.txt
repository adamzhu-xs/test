{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt \n",
    "from pyspark import *                   #SparkContext,RDD,Broadcast,Accumulator,SparkConf,SparkFiles,StorageLevel,TaskContext\n",
    "\n",
    "from pyspark.sql import *               #SparkSession, DataFrame, Column, Row, GroupedData, DataFrameNaFunctions, DataFrameStatFunctions, Window\n",
    "import pyspark.sql.functions as F\n",
    "from pyspark.sql.types import * \n",
    "\n",
    "from pyspark.ml  import *               #Transformer, UnaryTransformer,Estimator,Model,Pipeline,PipelineModel\n",
    "from pyspark.ml.feature import *        #Binarizer, BucketedRandomProjectionLSHE, BucketedRandomProjectionLSHModelE, Bucketizer, ChiSqSelectorE, ChiSqSelectorModelE, CountVectorizer, CountVectorizerModel, DCT, ElementwiseProduct, FeatureHasherE, HashingTF, IDF, IDFModel, ImputerE, ImputerModelE, IndexToString, MaxAbsScaler, MaxAbsScalerModel, MinHashLSHE, MinHashLSHModelE, MinMaxScaler, MinMaxScalerModel, NGram, Normalizer, OneHotEncoderD, OneHotEncoderEstimator, OneHotEncoderModel, PCA, PCAModel, PolynomialExpansion, QuantileDiscretizerE, RegexTokenizer, RFormulaE, RFormulaModelE, SQLTransformer, StandardScaler, StandardScalerModel, StopWordsRemover, StringIndexer, StringIndexerModel, Tokenizer, VectorAssembler, VectorIndexer, VectorIndexerModel, VectorSizeHintE, VectorSlicer, Word2Vec, Word2VecModel, , \n",
    "from pyspark.ml.classification import * #LinearSVCE, LinearSVCModelE, LogisticRegression, LogisticRegressionModel, LogisticRegressionSummaryE, LogisticRegressionTrainingSummaryE, BinaryLogisticRegressionSummaryE, BinaryLogisticRegressionTrainingSummaryE, DecisionTreeClassifier, DecisionTreeClassificationModel, GBTClassifier, GBTClassificationModel, RandomForestClassifier, RandomForestClassificationModel, NaiveBayes, NaiveBayesModel, MultilayerPerceptronClassifier, MultilayerPerceptronClassificationModel, OneVsRestE, OneVsRestModelE, , \n",
    "from pyspark.ml.clustering import *     #BisectingKMeans, BisectingKMeansModel, BisectingKMeansSummaryE, KMeans, KMeansModel, GaussianMixture, GaussianMixtureModel, GaussianMixtureSummaryE, LDA, LDAModel, LocalLDAModel, DistributedLDAModel, , \n",
    "from pyspark.ml.linalg import *         #Vector, DenseVector, SparseVector, Vectors, Matrix, DenseMatrix, SparseMatrix, Matrices, , \n",
    "from pyspark.ml.recommendation import * #ALS, ALSModel, , \n",
    "from pyspark.ml.regression import *     #AFTSurvivalRegressionE, AFTSurvivalRegressionModelE, DecisionTreeRegressor, DecisionTreeRegressionModel, GBTRegressor, GBTRegressionModel, GeneralizedLinearRegressionE, GeneralizedLinearRegressionModelE, GeneralizedLinearRegressionSummaryE, GeneralizedLinearRegressionTrainingSummaryE, IsotonicRegression, IsotonicRegressionModel, LinearRegression, LinearRegressionModel, LinearRegressionSummaryE, LinearRegressionTrainingSummaryE, RandomForestRegressor, RandomForestRegressionModel, , \n",
    "from pyspark.ml.stat import *           #moduleChiSquareTestE, CorrelationE, , \n",
    "from pyspark.ml.tuning import *         #ParamGridBuilder, CrossValidator, CrossValidatorModel, TrainValidationSplitE, TrainValidationSplitModelE, , \n",
    "from pyspark.ml.evaluation import *     #Evaluator, BinaryClassificationEvaluatorE, RegressionEvaluatorE, MulticlassClassificationEvaluatorE, ClusteringEvaluatorE, , \n",
    "from pyspark.ml.fpm import *            #FPGrowthE, FPGrowthModelE, , \n",
    "from pyspark.ml.util import *           #BaseReadWrite, DefaultParamsReadable, DefaultParamsReader, DefaultParamsWritable, DefaultParamsWriter, Identifiable, JavaMLReadable, JavaMLReader, JavaMLWritable, JavaMLWriter, JavaPredictionModel, MLReadable, MLReader, MLWritable, MLWriter, , , \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "spark = SparkSession.builder.appName(\"basic\").getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.9246187232017262,0.05306648311706847]\n"
     ]
    }
   ],
   "source": [
    "# sklern requires each feature in each column, Pyspark requires all features in one COlumn\n",
    "from sklearn.datasets import *  \n",
    "iris = load_iris()\n",
    "df = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "spdf = spark.createDataFrame(df)\n",
    "#spdf.show()\n",
    "\n",
    "# sklern requires each feature in each column, Pyspark requires all features in one COlumn\n",
    "va = VectorAssembler(inputCols=iris.feature_names, outputCol=\"features\")\n",
    "trdf = va.transform(spdf)\n",
    "pca = PCA(k=2, inputCol=\"features\", outputCol='pcafeatures') # k ~ n_components in sklearn\n",
    "md = pca.fit(trdf)\n",
    "result = md.transform(trdf)\n",
    "#result.select('pcafeatures', \"features\").show()\n",
    "print(md.explainedVariance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def draw_pca(X_r, y, target_names, ax, title):\n",
    "    lw = 2\n",
    "    colors = ['navy', 'turquoise', 'darkorange']\n",
    "    #[0,1,2] are three Names \n",
    "    for color, i, target_name in zip(colors, [0, 1, 2], target_names):\n",
    "        #draw 2 pca features for each y = target_names,3 species \n",
    "        ax.scatter(X_r[y == i, 0], X_r[y == i, 1], color=color, alpha=.8, lw=lw, label=target_name)\n",
    "    ax.legend(loc='best', shadow=False, scatterpoints=1)\n",
    "    ax.set_title(title)\n",
    "\n",
    "#Undoing- no direct methods \n",
    "def to_array(v):\n",
    "    return v.toArray().tolist()\n",
    "\n",
    "tA = F.udf(to_array, ArrayType(DoubleType()))\n",
    "spark.udf.register(\"tA\",to_array,  ArrayType(DoubleType()))\n",
    "\n",
    "res = result.select(tA(\"pcaFeatures\").alias(\"arr\"))\\\n",
    "     .select(F.col(\"arr\")[0].alias(\"PC1\"), F.col(\"arr\")[1].alias(\"PC2\")).toPandas()\n",
    "\n",
    "fig, ax1 = plt.subplots(1,1)\n",
    "draw_pca(res.values, iris.target, iris.target_names, ax1, 'PCA of IRIS dataset')\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use iris.csv, preprocessing: LabelEncoder and SelectKBest, algorithm: LogisticRegression, Create a model of iris and check the score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception ignored in: <function JavaWrapper.__del__ at 0x00000036C5769048>\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\spark\\python\\pyspark\\ml\\wrapper.py\", line 40, in __del__\n",
      "    if SparkContext._active_spark_context and self._java_obj is not None:\n",
      "AttributeError: 'ChiSqSelector' object has no attribute '_java_obj'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------+---------------+\n",
      "| predictedLabel|           Name|\n",
      "+---------------+---------------+\n",
      "|    Iris-setosa|    Iris-setosa|\n",
      "|    Iris-setosa|    Iris-setosa|\n",
      "|    Iris-setosa|    Iris-setosa|\n",
      "|    Iris-setosa|    Iris-setosa|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "| Iris-virginica| Iris-virginica|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "| Iris-virginica| Iris-virginica|\n",
      "|    Iris-setosa|    Iris-setosa|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "| Iris-virginica| Iris-virginica|\n",
      "|Iris-versicolor| Iris-virginica|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "| Iris-virginica| Iris-virginica|\n",
      "|Iris-versicolor|Iris-versicolor|\n",
      "+---------------+---------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data = spark.read.format('csv').options(header=True, inferSchema=True).load('data/iris.csv')\n",
    "features = list(set(data.columns) - {'Name'})\n",
    "va = VectorAssembler(inputCols=features, outputCol=\"rawfeatures\")\n",
    "\n",
    "si = StringIndexer(inputCol='Name', outputCol='label')\n",
    "sim = si.fit(data)\n",
    "ms = MinMaxScaler(inputCol='rawfeatures', outputCol='scaledFeatures')\n",
    "sel = ChiSqSelector(featuresCol='scaledFeatures', outputCol='finalFeatures',\n",
    "                   numTopFeatures=2, labelCol='label') #numTopFeatures ~ k\n",
    "lr = LogisticRegression(labelCol='label', featuresCol='finalFeatures', \n",
    "                        predictionCol='prediction')\n",
    "lc = IndexToString(inputCol='prediction',outputCol='predictedLabel', labels=sim.labels)\n",
    "\n",
    "pipeline = Pipeline(stages=[va,sim,ms,sel,lr,lc])\n",
    "\n",
    "(trainData, testData) = data.randomSplit([.75,.25]) #train/test split ratio\n",
    "model = pipeline.fit(trainData)\n",
    "#regParam=0.0, numTopFeatures\n",
    "ev = MulticlassClassificationEvaluator(predictionCol='prediction', \n",
    "                                       labelCol='label', metricName='accuracy')\n",
    "params = ParamGridBuilder()\\\n",
    "         .addGrid(lr.regParam, [0.1,1.0,10.0])\\\n",
    "         .addGrid(sel.numTopFeatures, [1,2,3])\\\n",
    "         .build()                              \n",
    "cv = CrossValidator(estimator=pipeline, \n",
    "                    estimatorParamMaps=params, \n",
    "                    evaluator=ev, \n",
    "                    numFolds=3)                          \n",
    "model = cv.fit(trainData)   \n",
    "preds = model.transform(testData)\n",
    "preds.select('predictedLabel', 'Name').show()\n",
    "\n",
    "print('Test accuracy', ev.evaluate(preds), \n",
    "      'Train accuracy', ev.evaluate(model.transform(trainData)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PySpark",
   "language": "python",
   "name": "pyspark"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
